$grid-breakpoints: (
	xs: 0,
	sm: 636px,
	md: 798px,
	lg: 1052px,
	xl: 1280px
  ) !default;
  //
  // @include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
  // @include _assert-starts-at-zero($grid-breakpoints);
  //
  //
  // // Grid containers
  // //
  // // Define the maximum width of `.container` for different screen sizes.
  //
  // // 30px auf jeden bereits draufgerechnet
  $container-max-widths: (
	sm: 600px,
	md: 760px,
	lg: 1000px,
	// lg: 1200px,
	xl: 1200px
  ) !default;


// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // Minimum breakpoint width. Null for the smallest (first) breakpoint.
  //
  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    576px
  @function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.1.
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
  }
  
  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
  // Useful for making responsive utilities.
  //
  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    ""  (Returns a blank string)
  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    "-sm"
  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  
  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
  // Makes the @content apply to the given breakpoint and wider.
  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
	  @media (min-width: $min) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.
  // Makes the @content apply to the given breakpoint and narrower.
  @mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
	  @media (max-width: $max) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media that spans multiple breakpoint widths.
  // Makes the @content apply between the min and max breakpoints
  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);
  
	@if $min != null and $max != null {
	  @media (min-width: $min) and (max-width: $max) {
		@content;
	  }
	} @else if $max == null {
	  @include media-breakpoint-up($lower) {
		@content;
	  }
	} @else if $min == null {
	  @include media-breakpoint-down($upper) {
		@content;
	  }
	}
  }
  
  // Media between the breakpoint's minimum and maximum widths.
  // No minimum for the smallest breakpoint, and no maximum for the largest one.
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	$max: breakpoint-max($name, $breakpoints);
  
	@if $min != null and $max != null {
	  @media (min-width: $min) and (max-width: $max) {
		@content;
	  }
	} @else if $max == null {
	  @include media-breakpoint-up($name) {
		@content;
	  }
	} @else if $min == null {
	  @include media-breakpoint-down($name) {
		@content;
	  }
	}
  }

  




/* Custom Mixins -------------------- */
@function calculateRem($size) {
    $remSize: $size / 16px;
    @return #{$remSize}rem;
}

@mixin fontSize($size) {
    font-size: $size; //Fallback in px
    font-size: calculateRem($size);
}



$spacer: 1rem !default;



//Custom variables

// Descriptive color variables

// Functional color variables

// Font stacks

// Asset paths

// colors
$rbtv-color-text: #b2b2b2;
$rbtv-color-text-light: #d0d0d0;
$rbtv-color-text-highlight: #fff;
$rbtv-color-text-dark: #222;

// $rbtv-color-yellow: #d89b26; // RBTV Logo yellow
$rbtv-color-yellow: #eb9b00; // RBTV Logo yellow
// $rbtv-color-blue: #3b68a8;
$rbtv-color-blue: #266f9f;
$rbtv-color-blue-light: lighten($rbtv-color-blue, 45%);
$rbtv-color-blue-shade: darken($rbtv-color-blue, 25%);
// $rbtv-color-red: #c0001f; // RBTV Logo red
$rbtv-color-red: #e1001a; // RBTV Logo red

$rbtv-color-green: #00bb00; // RBTV Logo red
$rbtv-color-brightyellow: #ffc001; // RBTV Logo red
$rbtv-color-purple: #a82df2; // RBTV Logo red
$rbtv-color-orange: #ec5300; // RBTV Logo red


// $rbtv-color-lightgrey: #888;
// $rbtv-color-grey: #656566;
// $rbtv-color-darkgrey: #222;
// $rbtv-color-bodybg: #1c1c1c;
// $rbtv-color-darkestgrey: #151515;
// $rbtv-color-dark: #050505;
// $rbtv-color-black: #000;

$rbtv-color-lightgrey: #888;
$rbtv-color-grey: #7a7a7a;
$rbtv-color-darkgrey: #383838;
$rbtv-color-bodybg: #212121;
$rbtv-color-darkestgrey: #252525;
$rbtv-color-dark: #050505;
$rbtv-color-black: #000;

$rbtv-color-darkBG: rgba($rbtv-color-dark, .95);

$rbtv-color-button-default: #e6e6e6;
$rbtv-color-button-secondary: darken($rbtv-color-button-default, 20%);


$rbtv-color-brand-google:#FF0000;
$rbtv-color-brand-twitch:#6441A4;
$rbtv-color-brand-steam:#144f82;
$rbtv-color-brand-reddit:#FF4500;
$rbtv-color-brand-spotify:#1ED760;
$rbtv-color-brand-applepodcasts:#a849dc;





// fonts
$rbtv-font-primary: 'Rubik', 'Roboto', Helvetica, Arial, sans-serif;
$rbtv-font-secondary: 'Arvo-RBTV-v1', 'Roboto', Helvetica, Arial, sans-serif;

$rbtv-fontSize-small: 12px;
$rbtv-fontSize-mediumsmall: 14px;
$rbtv-fontSize-medium: 16px;
$rbtv-fontSize-mediumlarge: 20px;
$rbtv-fontSize-large: 24px;


// border radius
$rbtv-borderRadius: 12px;
$rbtv-borderRadius-small: 5px;


// decorations, background patterns
$rbtv-stripedBackground: repeating-linear-gradient(
    -45deg,
    #161417,
    #161417 12px,
    #0b090b 12px,
    #0b090b 24px
);

$rbtv-stripedBackgroundLarge: repeating-linear-gradient(
    -45deg,
    #161417,
    #161417 36px,
    transparent 36px,
    transparent 72px
);

$rbtv-stripedBackgroundSoft: repeating-linear-gradient(
    -45deg,
    #181619,
    #181619 9px,
    #252326 9px,
    #252326 18px
);

$rbtv-overlay-boxshadow: 0 4px 0 0 rgba($rbtv-color-black, .5);
$rbtv-overlay-expandingboxshadow: 0 2px 0 2px rgba($rbtv-color-black, .4);


// animations, transitions
$rbtv-animationDuration: 0.3s;
$rbtv-easing-ease: cubic-bezier(.75,0,.25,1);
$rbtv-easing-snappy: cubic-bezier(1.000, 0.000, 0.000, 1.000);
$rbtv-easing-hardEaseOut: cubic-bezier(0,1,0,1);
$rbtv-easing-softEaseOut: cubic-bezier(1,0,1,0);






/* Base Styles -------------------- */

/* General sitewide styles for universal elements */


// AntiAliasing f√ºr alles
html, body {
    /* Support for all WebKit browsers. */
    -webkit-font-smoothing: antialiased;
    /* Support for Safari and Chrome. */
    text-rendering: optimizeLegibility;

    /* Support for Firefox. */
    -moz-osx-font-smoothing: grayscale;

    /* Support for IE. */
    font-feature-settings: 'liga';
}

html {
    font-size: 1rem;

    @include media-breakpoint-down(md) {
        font-size: .9rem;
    }
    @include media-breakpoint-down(xs) {
        font-size: .8rem;
    }
}

body {
    background-color: $rbtv-color-bodybg;
    color: $rbtv-color-text;

    font-family: $rbtv-font-primary;
    font-weight: 400;

    overflow-y: scroll;

    transition: padding ($rbtv-animationDuration) cubic-bezier(0.000, 1.000, 0.000, 1.000);  // for the videoplayer resize events

    // @include media-breakpoint-up(sm) {
        background-image: url($small-bg-image);
        background-repeat: no-repeat;
        background-position: top center;
        background-attachment: fixed;
        background-size: 100% auto;
    // }

    @include media-breakpoint-up(lg) {
        background-image: url($large-bg-image);
    }


    @include media-breakpoint-down(md) {
        padding-bottom: $spacer*4; // because footer moves into offcanvas nav - with this margin the OpenStream-Button doesn't overlay any content
    }

    &.overflow-hidden {
        margin-right: 12px;
    }

}

.custombackground {
    position: fixed;
    z-index: 0;
    background-color: $rbtv-color-yellow;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
}


main {
    margin-top: $spacer;
    position: relative;
    // @include media-breakpoint-down(md) {
    //     margin-top: $spacer;
    // }

    section {
        margin-bottom: $spacer;
    }
}


// Selections
::-moz-selection { background: $rbtv-color-blue; color: $rbtv-color-text-highlight; }
::selection { background: $rbtv-color-blue; color: $rbtv-color-text-highlight; }


// Scrollbars
::-webkit-scrollbar-track {
    background-color: $rbtv-color-black;
}
::-webkit-scrollbar-thumb {
    background-color: $rbtv-color-darkgrey;
    border-radius: 6px;
    border: 2px solid $rbtv-color-black;
    min-height: 50px;
}
::-webkit-scrollbar {
    width: 12px;
}


// Hyperlinks

a,
.link {

    

        cursor: pointer;

        &.link,
        &:link {
            color: $rbtv-color-button-default;
        }

        &.link-wrapper {
            &:focus {
                text-decoration: none;
            }
        }

        &:hover,
        &:focus {
            color: $rbtv-color-text-highlight;
            text-decoration: underline;
            
            .rbtv-icon {
                text-decoration: none;
            }
        }
        &:focus {
            // outline: 1px dotted rgba($rbtv-color-text, .65);
            // outline-offset: 1px;
            outline: none;
        }
        &:active {
            color: $rbtv-color-yellow;
        }

        &.btn {
            color: initial;
        }

        &.secondary {
            
                color: $rbtv-color-text;
            
            &:hover,
            &:focus {
                color: $rbtv-color-text-highlight;
            }
            &:focus {
                // outline: 1px dotted rgba($rbtv-color-text, .65);
                // outline-offset: 1px;
            }
            &:active {
                color: $rbtv-color-yellow;
            }
        }

    

    &.link-wrapper {
        &:hover {
            text-decoration: none;
        }
    }
}


h1, h2, h3, h4, h5, h6 {
    font-family: $rbtv-font-secondary;
    font-weight: bold;
    color: $rbtv-color-text-highlight;
    margin-bottom: $spacer;

    .rbtv-icon {
        font-size: inherit;
    }
}


.alert {
    padding: ($spacer*.75) ($spacer*2.5) ($spacer*.75) ($spacer*.75);
}

dt {
    font-weight: 500;
    text-transform: uppercase;
    @include fontSize($rbtv-fontSize-small);
    color: $rbtv-color-grey;
}

dl {
    dd {
        &:last-of-type {
            margin-bottom: 0;
        }
    }
}


.wrap {
	background-color: $rbtv-color-darkBG;
}

.d-header {
	background-color: transparent;
}